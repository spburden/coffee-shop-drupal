<?php
/**
 * @file
 * comment_delete.module
 */

/**
 * Implements hook_permission().
 */
function comment_delete_permission() {
  return array(
    'delete own comment' => array(
      'title' => t('Delete own comments'),
      'description' => t('Allow user to delete their own comments within threshold.'),
    ),
    'delete own comment anytime' => array(
      'title' => t('Delete own comments anytime'),
      'description' => t('Allow user to delete their own comments anytime.'),
    ),
    'delete any comment' => array(
      'title' => t('Delete any comment'),
      'description' => t('Allow user to delete any comment within threshold.'),
    ),
    'delete any comment anytime' => array(
      'title' => t('Delete any comment anytime'),
      'description' => t('Allow user to delete any comment anytime.'),
    ),
    'delete comment replies' => array(
      'title' => t('Delete comment replies'),
      'description' => t('Allow user to delete replies to their own comments.'),
    ),
    'move comment replies' => array(
      'title' => t('Move comment replies'),
      'description' => t('Allow user to move replies to their own comments.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function comment_delete_menu() {
  $items['admin/content/comment/deletion'] = array(
    'title' => 'Deletion',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_delete_settings_form'),
    'access arguments' => array('administer comments'),
    'file' => 'comment_delete.admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function comment_delete_menu_alter(&$items) {
  $items['comment/%/delete']['page callback'] = 'drupal_get_form';
  $items['comment/%/delete']['page arguments'] = array('comment_delete_options_form', 1);
  $items['comment/%/delete']['access callback'] = 'comment_delete_check_access';
  $items['comment/%/delete']['access arguments'] = array(1);
  unset($items['comment/%/delete']['file']);
}

/**
 * Implements hook_comment_view().
 */
function comment_delete_comment_view($comment, $view_mode, $langcode) {
  if (comment_delete_check_access($comment->cid)) {
    $comment->content['links']['comment']['#links']['comment-delete'] = array(
      'title' => t('delete'),
      'href' => 'comment/'. $comment->cid .'/delete',
      'html' => TRUE,
    );
  }
}

/**
 * Checks user access to delete specified comment.
 *
 * @param $cid int
 *   Unique comment identification number.
 * @return boolean
 *   Returns TRUE if user has access and FALSE otherwise.
 */
function comment_delete_check_access($cid) {
  if (empty($cid) || !is_numeric($cid)) return FALSE;
  global $user;

  // Retrieve specified comment object.
  $comment = comment_load($cid);
  if (!isset($comment->cid)) return FALSE;
  $threshold = 0;

  // Calculate allowable comment deletion threshold.
  if ($threshold_setting = variable_get('comment_delete_threshold', 0)) {
    $threshold = (time() - $comment->created) > $threshold_setting;
  }

  // Check permissions for users own comment.
  if ((user_access('delete any comment') && !$threshold) || user_access('delete any comment anytime')) {
    return TRUE;
  }

  // Check permissions for any comment.
  if (((user_access('delete own comment') && !$threshold) || user_access('delete own comment anytime')) && $user->uid == $comment->uid) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Comment deletion options and confirmation form.
 *
 * @param $cid int
 *   Unique comment identification number.
 */
function comment_delete_options_form($form, &$form_state, $cid) {
  $comment = comment_load($cid);
  if (!isset($comment->cid)) drupal_goto('<front>');
  $form_state['storage']['comment'] = $comment;
  $options = array();

  // Define available comment deletion options.
  if (user_access('delete comment replies')) {
    $options[0] = t('Delete comment and replies');
  }
  if (user_access('move comment replies')) {
    $options[1] = t('Delete comment and move replies');
  }
  $options[2] = t('Delete comment and keep replies');

  // Provide comment deletion radio options.
  if (count($options) > 1) {
    $form['action'] = array(
      '#type' => 'radios',
      '#title' => t('How should replies to this comment be handled?'),
      '#options' => $options,
      '#required' => TRUE,
      '#default_value' => '',
    );
  }

  // Perform default action when access is limited.
  else {
    $form['action'] = array(
      '#type' => 'hidden',
      '#value' => 2,
    );
  }

  // Return delete comment confirmation form.
  $message = t('Are you sure you want to delete the comment %title?', array('%title' => $comment->subject));
  return confirm_form($form, $message, "node/{$comment->nid}", NULL, t('Delete'));
}

/**
 * Submission handler for comment deletion form.
 */
function comment_delete_options_form_submit($form, $form_state) {
  $comment = $form_state['storage']['comment'];
  switch ($form_state['values']['action']) {

    // Delete comment and replies.
    case 0:
      comment_delete($comment->cid);
      break;

    // Delete comment and move replies.
    case 1:
      comment_delete_move_replies($comment);
      comment_delete($comment->cid);
      break;

    // Delete comment and keep replies.
    case 2:
      comment_delete_keep_replies($comment);
      break;
  }

  // Display success message and redirect if destination not set.
  drupal_set_message(t('Comment has been successfully deleted.'));
  if (!isset($_GET['destination'])) {
    drupal_goto('node/'. $comment->nid);
  }
}

/**
 * Removes comment while keeping all replies.
 *
 * @param $comment object
 *   Fully loaded comment object.
 */
function comment_delete_keep_replies($comment) {

  // Retrieve first-level comment replies count.
  $replies = db_select('comment', 'c')
    ->fields('c', array('cid'))
    ->condition('c.pid', $comment->cid, '=')
    ->countQuery()
    ->execute()->fetchField();

  // Remove subject/body when replies exist.
  if ($replies > 0) {
    $comment->subject = '';
    $comment->comment_body[$comment->language][0]['value'] = '';
    comment_save($comment);
  }

  // Remove entire comment when no replies exist.
  else {
    comment_delete($comment->cid);
  }
}

/**
 * Moves comment replies up one thread.
 *
 * @param $comment object
 *   Fully loaded comment object.
 */
function comment_delete_move_replies($comment) {

  // Retrieve all first-level comment replies.
  $replies = db_select('comment', 'c')
    ->fields('c', array('cid'))
    ->condition('c.pid', $comment->cid, '=')
    ->execute();

  // Re-save each comment reply with new parent comment.
  foreach ($replies as $reply) {
    $comment_reply = comment_load($reply->cid);
    $comment_reply->pid = $comment->pid;
    $comment_reply->thread = comment_delete_thread_string($comment_reply);
    comment_save($comment_reply);
  }
}

/**
 * Calculates comments new threading string.
 *
 * @param $comment object
 *   Fully loaded comment object.
 * @return string
 *   String containing valid comment thread.
 */
function comment_delete_thread_string($comment) {

  // The following code has been pulled from comment_save(). Unfortunately
  // when calling comment_save() it will only generate a thread string upon
  // initial comment creation. Some changes have been made to make it
  // compatible with the comment_delete module.
  if ($comment->pid == 0) {
    // This is a comment with no parent comment (depth 0): we start
    // by retrieving the maximum thread level.
    $max = db_query('SELECT MAX(thread) FROM {comment} WHERE nid = :nid', array(':nid' => $comment->nid))->fetchField();
    // Strip the "/" from the end of the thread.
    $max = rtrim($max, '/');
    // We need to get the value at the correct depth.
    $parts = explode('.', $max);
    $firstsegment = $parts[0];
    // Finally, build the thread field for this new comment.
    return int2vancode(vancode2int($firstsegment) + 1) . '/';
  }
  else {
    // This is a comment with a parent comment, so increase the part of the
    // thread value at the proper depth.

    // Get the parent comment:
    $parent = comment_load($comment->pid);
    // Strip the "/" from the end of the parent thread.
    $parent->thread = (string) rtrim((string) $parent->thread, '/');
    // Get the max value in *this* thread.
    $max = db_query("SELECT MAX(thread) FROM {comment} WHERE thread LIKE :thread AND nid = :nid", array(
      ':thread' => $parent->thread . '.%',
      ':nid' => $comment->nid,
    ))->fetchField();

    if ($max == '') {
      // First child of this parent.
      return $parent->thread . '.' . int2vancode(0) . '/';
    }
    else {
      // Strip the "/" at the end of the thread.
      $max = rtrim($max, '/');
      // Get the value at the correct depth.
      $parts = explode('.', $max);
      $parent_depth = count(explode('.', $parent->thread));
      $last = $parts[$parent_depth];
      // Finally, build the thread field for this new comment.
      return $parent->thread . '.' . int2vancode(vancode2int($last) + 1) . '/';
    }
  }
}
